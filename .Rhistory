odds <- c(1.18,1.07,1.28,1.22,1.10,1.25,1.22,1.33)
## SET variances -  default bernoulli variance:
## COMMENT OUT with ## IF USING CUSTOM BELOW
win_probabilities <- 1.0/odds
win_var <- win_probabilities*(1-win_probabilities)
#custom variances (should be between 0 and 1):
## COMMENT OUT with ## IF USING DEFAULT ABOVE
win_probabilities <- c(0.8474576, 0.96, 0.7812500, 0.8196721, 0.96, 0.8000000, 0.8196721, 0.7518797)
win_var <- win_probabilities*(1-win_probabilities)
## calculte covariacne matrix and expected returns
covariance_matrix <- diag(n)*win_var
covariance_matrix_inverse <- solve(covariance_matrix)
expected_returns <- win_probabilities*odds
## calculate weights and normalize
weights <- covariance_matrix_inverse%*%expected_returns
weights <- weights/(sum(weights))
#final proportion in df_w
df_w <- as.data.frame(weights)
rownames(df_w) <- fighters
colnames(df_w) <- c("Proportion of Bet")
View(df_w)
## SET n
n <- 4
## SET fighters (predicted winners)
fighters <- c("Khizriev/Tichota","Khizriev/Blaydes","Tichota/Fiorot","Khizriev/Tichota/Blaydes")
## SET odds
odds <- c(1.17,1.34,1.31,1.44)
## SET variances -  default bernoulli variance:
## COMMENT OUT with ## IF USING CUSTOM BELOW
win_probabilities <- 1.0/odds
win_var <- win_probabilities*(1-win_probabilities)
win_probabilities
## SET n
n <- 4
## SET fighters (predicted winners)
fighters <- c("Khizriev/Tichota","Khizriev/Blaydes","Tichota/Fiorot","Khizriev/Tichota/Blaydes")
## SET odds
odds <- c(1.17,1.34,1.31,1.44)
## SET variances -  default bernoulli variance:
## COMMENT OUT with ## IF USING CUSTOM BELOW
win_probabilities <- 1.0/odds
win_var <- win_probabilities*(1-win_probabilities)
#custom variances (should be between 0 and 1):
## COMMENT OUT with ## IF USING DEFAULT ABOVE
win_probabilities <- c( 0.9, 0.8, 0.7633588, 0.6944444)
win_var <- win_probabilities*(1-win_probabilities)
## calculte covariacne matrix and expected returns
covariance_matrix <- diag(n)*win_var
covariance_matrix_inverse <- solve(covariance_matrix)
expected_returns <- win_probabilities*odds
## calculate weights and normalize
weights <- covariance_matrix_inverse%*%expected_returns
weights <- weights/(sum(weights))
#final proportion in df_w
df_w <- as.data.frame(weights)
rownames(df_w) <- fighters
colnames(df_w) <- c("Proportion of Bet")
View(df_w)
## SET n
n <- 6
## SET fighters (predicted winners)
fighters <- c("Aldabal","AlQaisi","Yahya","Asha","Ibrahim","Sengul")
## SET odds
odds <- c(1.25,1.28,1.25,1.28,1.18,1.36)
## SET variances -  default bernoulli variance:
## COMMENT OUT with ## IF USING CUSTOM BELOW
win_probabilities <- 1.0/odds
win_var <- win_probabilities*(1-win_probabilities)
## calculte covariacne matrix and expected returns
covariance_matrix <- diag(n)*win_var
covariance_matrix_inverse <- solve(covariance_matrix)
expected_returns <- win_probabilities*odds
## calculate weights and normalize
weights <- covariance_matrix_inverse%*%expected_returns
weights <- weights/(sum(weights))
#final proportion in df_w
df_w <- as.data.frame(weights)
rownames(df_w) <- fighters
colnames(df_w) <- c("Proportion of Bet")
View(df_w)
## SET n
n <- 3
## SET fighters (predicted winners)
fighters <- c("Ibrahim/Aldabal","Ibrahim/Yahya","Ibrahim/Khizriev")
## SET odds
odds <- c(1.47,1.47,1.30)
## SET variances -  default bernoulli variance:
## COMMENT OUT with ## IF USING CUSTOM BELOW
win_probabilities <- 1.0/odds
win_var <- win_probabilities*(1-win_probabilities)
win_probabilities
## SET n
n <- 3
## SET fighters (predicted winners)
fighters <- c("Ibrahim/Aldabal","Ibrahim/Yahya","Ibrahim/Khizriev")
## SET odds
odds <- c(1.47,1.47,1.30)
## SET variances -  default bernoulli variance:
## COMMENT OUT with ## IF USING CUSTOM BELOW
win_probabilities <- 1.0/odds
win_var <- win_probabilities*(1-win_probabilities)
# #custom variances (should be between 0 and 1):
# ## COMMENT OUT with ## IF USING DEFAULT ABOVE
win_probabilities <- c(0.6802721, 0.6802721, 0.85)
win_var <- win_probabilities*(1-win_probabilities)
## calculte covariacne matrix and expected returns
covariance_matrix <- diag(n)*win_var
covariance_matrix_inverse <- solve(covariance_matrix)
expected_returns <- win_probabilities*odds
## calculate weights and normalize
weights <- covariance_matrix_inverse%*%expected_returns
weights <- weights/(sum(weights))
#final proportion in df_w
df_w <- as.data.frame(weights)
rownames(df_w) <- fighters
colnames(df_w) <- c("Proportion of Bet")
View(df_w)
## SET n
n <- 6
## SET fighters (predicted winners)
fighters <- c("Molloy","Lister","Mantykivi","Cullen","McEwan","Duncan")
## SET odds
odds <- c(1.25,1.33,1.18,1.28,1.44,1.36)
odds <- c(1.25,1.33,1.18,1.28,1.44,1.36)
## SET variances -  default bernoulli variance:
## COMMENT OUT with ## IF USING CUSTOM BELOW
win_probabilities <- 1.0/odds
win_var <- win_probabilities*(1-win_probabilities)
win_probabilities
# #custom variances (should be between 0 and 1):
# ## COMMENT OUT with ## IF USING DEFAULT ABOVE
win_probabilities <- c(0.8000000, 0.7518797, 0.885, 0.7812500, 0.6944444, 0.685)
win_var <- win_probabilities*(1-win_probabilities)
## calculte covariacne matrix and expected returns
covariance_matrix <- diag(n)*win_var
covariance_matrix_inverse <- solve(covariance_matrix)
expected_returns <- win_probabilities*odds
## calculate weights and normalize
weights <- covariance_matrix_inverse%*%expected_returns
weights <- weights/(sum(weights))
#final proportion in df_w
df_w <- as.data.frame(weights)
rownames(df_w) <- fighters
colnames(df_w) <- c("Proportion of Bet")
View(df_w)
n <- 8
## SET fighters (predicted winners)
fighters <- c("McBain","Blyfield","Bonner","Durao","George","Bonfiglio","Panferov","Kimbel")
## SET odds
odds <- c(1.36,1.15,1.18,1.25,1.12,1.22,1.12,1.18)
## SET variances -  default bernoulli variance:
## COMMENT OUT with ## IF USING CUSTOM BELOW
win_probabilities <- 1.0/odds
win_var <- win_probabilities*(1-win_probabilities)
win_probabilities
# #custom variances (should be between 0 and 1):
# ## COMMENT OUT with ## IF USING DEFAULT ABOVE
win_probabilities <- c(0.7352941, 0.8695652, 0.8474576, 0.8000000, 0.8928571, 0.8196721, 0.8928571, 0.8474576)
win_var <- win_probabilities*(1-win_probabilities)
## calculte covariacne matrix and expected returns
covariance_matrix <- diag(n)*win_var
covariance_matrix_inverse <- solve(covariance_matrix)
expected_returns <- win_probabilities*odds
## calculate weights and normalize
weights <- covariance_matrix_inverse%*%expected_returns
weights <- weights/(sum(weights))
#final proportion in df_w
df_w <- as.data.frame(weights)
rownames(df_w) <- fighters
colnames(df_w) <- c("Proportion of Bet")
View(df_w)
## SET n
n <- 3
## SET fighters (predicted winners)
fighters <- c("Blyfield/George","Kimbel/Panferov","Blyfield/George/Panferov")
## SET odds
odds <- c(1.29,1.33,1.46)
## SET variances -  default bernoulli variance:
## COMMENT OUT with ## IF USING CUSTOM BELOW
win_probabilities <- 1.0/odds
win_var <- win_probabilities*(1-win_probabilities)
# #custom variances (should be between 0 and 1):
# ## COMMENT OUT with ## IF USING DEFAULT ABOVE
# win_probabilities <- c(0.7352941, 0.8695652, 0.8474576, 0.8000000, 0.8928571, 0.8196721, 0.8928571, 0.8474576)
# win_var <- win_probabilities*(1-win_probabilities)
## calculte covariacne matrix and expected returns
covariance_matrix <- diag(n)*win_var
covariance_matrix_inverse <- solve(covariance_matrix)
expected_returns <- win_probabilities*odds
## calculate weights and normalize
weights <- covariance_matrix_inverse%*%expected_returns
weights <- weights/(sum(weights))
#final proportion in df_w
df_w <- as.data.frame(weights)
rownames(df_w) <- fighters
colnames(df_w) <- c("Proportion of Bet")
###
View(df_w)
## SET n
n <- 3
## SET fighters (predicted winners)
fighters <- c("Mantykivi/Cullen","Mantykivi/Molloy","Mantykivi/Molloy/Cullen")
## SET odds
odds <- c(1.51,1.47,1.89)
## SET variances -  default bernoulli variance:
## COMMENT OUT with ## IF USING CUSTOM BELOW
win_probabilities <- 1.0/odds
win_var <- win_probabilities*(1-win_probabilities)
# #cust
win_probabilities
# Suppose x is a p-vector of returns of some assets with expected value µ and covariance Σ. The
# Markowitz Portfolio is the portfolio w = Σ−1µ. Scale multiples of this portfolio solve various
# portfolio optimization problems, among them
## MARKOWITZ PORTFOLIO  (April 1 2022)
################################ BEFORE YOU START#####################################################
# # 1. SET THE n (number of fights)
# # 2. set the VARIANCE for each fight in the vector called "win_var"
# #  if you don't program the variance it will default to the bernoulli distribution variance p*(1-p)
# # 3. List the fighters in order
# # 4. List the odds in order
## SET n
n <- 3
## SET fighters (predicted winners)
fighters <- c("Mantykivi/Cullen","Mantykivi/Molloy","Mantykivi/Molloy/Cullen")
## SET odds
odds <- c(1.51,1.47,1.89)
## SET variances -  default bernoulli variance:
## COMMENT OUT with ## IF USING CUSTOM BELOW
win_probabilities <- 1.0/odds
win_var <- win_probabilities*(1-win_probabilities)
# #custom variances (should be between 0 and 1):
# ## COMMENT OUT with ## IF USING DEFAULT ABOVE
win_probabilities <- c(0.71, 0.6802721, 0.5291005)
win_var <- win_probabilities*(1-win_probabilities)
## calculte covariacne matrix and expected returns
covariance_matrix <- diag(n)*win_var
covariance_matrix_inverse <- solve(covariance_matrix)
expected_returns <- win_probabilities*odds
## calculate weights and normalize
weights <- covariance_matrix_inverse%*%expected_returns
weights <- weights/(sum(weights))
#final proportion in df_w
df_w <- as.data.frame(weights)
rownames(df_w) <- fighters
colnames(df_w) <- c("Proportion of Bet")
###
View(df_w)
rbinom(20, 1, 0.5)
## Make random gender data
n <- 10
## just randomly simulating answers here
gender_she <- rbinom(n, 1, 0.5)
gender_he <- rbinom(n, 1, 0.5)
gender_they <-  rbinom(n, 1, 0.5)
gender_other <-  rbinom(n, 1, 0.5)
## Make random gender data
## randomly saying there are 40 respondents
n <- 40
## just randomly simulating answers here
gender_she <- rbinom(n, 1, 0.5)
gender_he <- rbinom(n, 1, 0.5)
gender_they <-  rbinom(n, 1, 0.5)
gender_other <-  rbinom(n, 1, 0.5)
all_gender <- as.data.frame(matrix(data = NA, nrow = n, ncol = 4))
## first make data frame:
all_gender <- as.data.frame(matrix(data = NA, nrow = n, ncol = 4))
## populate data frame:
all_gender[,1] <- gender_she
all_gender[,1] <- gender_he
all_gender[,1] <- gender_they
all_gender[,1] <- gender_other
## name columns
colnames(all_gender) <- c("she","he","they","other")
all_gender
## Make random gender data
## randomly saying there are 40 respondents
n <- 40
## just randomly simulating answers here
gender_she <- rbinom(n, 1, 0.5)
gender_he <- rbinom(n, 1, 0.5)
gender_they <-  rbinom(n, 1, 0.5)
gender_other <-  rbinom(n, 1, 0.5)
## Now to make a table as you specified containing frequencies and percentages for each combo
## 4 answers, 15 combinations? 4 choose 1 + 4 choose 2 + 4 choose 3 + 4 choose 4
## first make data frame:
all_gender <- as.data.frame(matrix(data = NA, nrow = n, ncol = 4))
## populate data frame:
all_gender[,1] <- gender_she
all_gender[,1] <- gender_he
all_gender[,1] <- gender_they
all_gender[,1] <- gender_other
## name columns
colnames(all_gender) <- c("she","he","they","other")
summarise(all_gender)
all_gender[,1] <- as.factor(gender_she)
all_gender[,1] <- as.factor(gender_he)
all_gender[,1] <- as.factor(gender_they)
all_gender[,1] <- as.factor(gender_other)
## name columns
colnames(all_gender) <- c("she","he","they","other")
summarise(all_gender)
library(dplyr)
library(tidyr)
all_gender %>% group_by("she","he","they","other") %>% summarise(n = n())
all_gender %>% group_by("she","he","they","other")
all_gender %>% group_by(she,he,they,other)
gender_she <- rbinom(n, 1, 0.5)
gender_he <- rbinom(n, 1, 0.5)
gender_they <-  rbinom(n, 1, 0.5)
gender_other <-  rbinom(n, 1, 0.5)
gender_he
all_gender[,1] <- as.factor(gender_she)
all_gender[,1] <- as.factor(gender_he)
all_gender[,1] <- as.factor(gender_they)
all_gender[,1] <- as.factor(gender_other)
colnames(all_gender) <- c("she","he","they","other")
all_gender
all_gender[,1] <- as.factor(gender_she)
all_gender[,2] <- as.factor(gender_he)
all_gender[,3] <- as.factor(gender_they)
all_gender[,4] <- as.factor(gender_other)
colnames(all_gender) <- c("she","he","they","other")
all_gender %>% group_by(she,he,they,other)
all_gender
summary(all_gender)
all_gender %>% unite(she, he, they,other, remove=FALSE)
summary(all_gender)
all_gender
all_combinations <- as.data.frame(matrix(data = NA, nrow = 15, ncol = 3))
all_combinations
## name columns
colnames(all_combinations) <- c("name","freq","percentage")
expand_grid(c("she","he","they","other"))
## populate first column with all combintions (I did this manually but you can do it using the "gather")
expand_grid(colnames(all_gender))
all_combinations$name
sum(all_gender$she)
all_gender$she
all_gender[,1] <- gender_she
all_gender[,2] <- gender_he
all_gender[,3] <- gender_they
all_gender[,4] <- gender_other
colnames(all_gender) <- c("she","he","they","other")
## Now make your new data frame with all the combinations that you would like
## 4 answers, 15 combinations? 4 choose 1 + 4 choose 2 + 4 choose 3 + 4 choose 4
## lets do three columns, one for the combination name, and one for the frequency, and one for the percentage:
all_combinations <- as.data.frame(matrix(data = NA, nrow = 15, ncol = 3))
## name columns
colnames(all_combinations) <- c("name","freq","percentage")
## populate first four combinations
all_combinations$name[1:4] <- c("she","he","they","other")
all_combinations$freq[1] <- sum(all_gender$she)
sum(all_gender$she)
for(i in 1:4){
all_combinations$freq[i] <- sum(all_gender[,i])
all_combinations$percentage[i] <- sum(all_gender[,i]/n)
}
all_combinations
library(dplyr)
all_gender %>%
group_by(she, he,they,other) %>%
summarise_each(funs(sum))
all_gender %>%
group_by(she, he,they,other) %>%
summarise_all(sum)
new_table <- all_gender %>%
group_by(she, he,they,other) %>%
summarise_all(sum)
library(dplyr)
new_table <- all_gender %>%
group_by(she, he,they,other) %>%
summarise_all(sum, n = n(), freq = sum/n)
new_table <- all_gender %>%
group_by(she, he,they,other) %>%
summarise_all(sum, num = n())
new_table <- all_gender %>%
group_by(she, he,they,other)
new_table
new_table <- all_gender %>%
group_by(she, he,they,other) %>%
distinct() %>%
summarise(sum, num = n())
new_table <- all_gender %>%
group_by(she, he,they,other) %>%
summarise(sum, num = n())
new_table <- all_gender %>%
group_by(she, he,they,other)
new_table
new_table <- all_gender %>%
group_by(she, he,they,other)
new_table
table(new_table)
all_gender %>%
pivot_longer(names_to = "gender", values_to = "count")
all_gender %>%
pivot_longer(everything(),names_to = "gender", values_to = "count")
all_gender %>%
pivot_longer(everything(),names_to = "she_he_they_other", values_to = "count")
all_gender %>%
pivot_longer(everything(),names_to = c("she","he","they","other"), values_to = "count")
all_gender %>%
pivot_longer(everything(),names_to = c("she","he","they","other"), names_sep = "-",values_to = "count")
all_gender %>%
pivot_longer(everything(),names_to = c("she","he","they","other"), names_sep = "_",values_to = "count")
all_gender %>%
pivot_longer(everything(),names_to = "gender", values_to = "count")
all_gender %>%
group_by(she, he,they,other) %>%
pivot_longer(everything(),names_to = "gender", values_to = "count")
all_gender %>%
group_by(she, he,they,other)
all_gender
summary(all_gender)
summary(as.factor(all_gender))
all_gender
summary(as.factor(all_gender))
## Make random gender data
## randomly saying there are 40 respondents
n <- 40
## just randomly simulating answers here
gender_she <- rbinom(n, 1, 0.5)
gender_he <- rbinom(n, 1, 0.5)
gender_they <-  rbinom(n, 1, 0.5)
gender_other <-  rbinom(n, 1, 0.5)
## Now to make a table as you specified containing frequencies and percentages for each combo
## first make data frame:
all_gender <- as.data.frame(matrix(data = NA, nrow = n, ncol = 4))
## populate data frame:
all_gender[,1] <- gender_she
all_gender[,2] <- gender_he
all_gender[,3] <- gender_they
all_gender[,4] <- gender_other
## name columns
colnames(all_gender) <- c("she","he","they","other")
summary(as.factor(all_gender))
all_gender
all_gender$comb <- paste(all_gender$she,all_gender$he,all_gender$they,all_gender$other)
all_gender$comb
#now make it a factor so that we can count it:
all_gender$comb <- as.factor(all_gender$comb)
all_gender
summary(all_gender$comb)
#now we can do our coutnts: (using dplyr)
library(dplyr)
all_gender %<% group_by(comb) %>% summarise(n1=n(), freq = n1/n)
all_gender %>% group_by(comb) %>% summarise(n1=n(), freq = n1/n)
all_gender %>% group_by(she) %>% summarise(n1=n(), freq = n1/n)
all_gender %>% group_by(he) %>% summarise(n1=n(), freq = n1/n)
all_gender %>% group_by(they) %>% summarise(n1=n(), freq = n1/n)
all_gender %>% group_by(other) %>% summarise(n1=n(), freq = n1/n)
all_gender %>% group_by(she,he) %>% summarise(n1=n(), freq = n1/n)
all_gender %>% group_by(she,he,they,other) %>% summarise(n1=n(), freq = n1/n)
all_gender %>% group_by(she,he,they,other) %>% summarise(n1=n(), freq = n1/n)
## SET n
n <- 9
## SET fighters (predicted winners)
fighters <- c("George","Bonfiglio","Panferov","Kimbel","Turner","Stnakovic","Bonner","Raptors","Celtics")
## SET odds
odds <- c(1.12,1.18,1.12,1.18,1.30,1.15,1.18,1.12,1.07)
## SET variances -  default bernoulli variance:
## COMMENT OUT with ## IF USING CUSTOM BELOW
win_probabilities <- 1.0/odds
win_var <- win_probabilities*(1-win_probabilities)
win_probabilities
win_probabilities
# #custom variances (should be between 0 and 1):
# ## COMMENT OUT with ## IF USING DEFAULT ABOVE
win_probabilities <- c(0.8928571, 0.8474576, 0.8928571, 0.8474576, 0.71, 0.8695652, 0.8474576, 0.8928571, 0.9345794)
win_var <- win_probabilities*(1-win_probabilities)
## calculte covariacne matrix and expected returns
covariance_matrix <- diag(n)*win_var
covariance_matrix_inverse <- solve(covariance_matrix)
expected_returns <- win_probabilities*odds
## calculate weights and normalize
weights <- covariance_matrix_inverse%*%expected_returns
weights <- weights/(sum(weights))
#final proportion in df_w
df_w <- as.data.frame(weights)
rownames(df_w) <- fighters
colnames(df_w) <- c("Proportion of Bet")
View(df_w)
n <- 3
## SET fighters (predicted winners)
fighters <- c("George/Raptors","Panferov/Celtics","Stankovic/Celtics/Raptors")
## SET odds
odds <- c(1.26,1.2,1.35)
## SET variances -  default bernoulli variance:
## COMMENT OUT with ## IF USING CUSTOM BELOW
win_probabilities <- 1.0/odds
win_var <- win_probabilities*(1-win_probabilities)
win_probabilities
## calculte covariacne matrix and expected returns
covariance_matrix <- diag(n)*win_var
covariance_matrix_inverse <- solve(covariance_matrix)
expected_returns <- win_probabilities*odds
## calculate weights and normalize
weights <- covariance_matrix_inverse%*%expected_returns
weights <- weights/(sum(weights))
#final proportion in df_w
df_w <- as.data.frame(weights)
rownames(df_w) <- fighters
colnames(df_w) <- c("Proportion of Bet")
View(df_w)
shiny::runApp('Desktop/sportsbetting/MarkowitzPortfolio')
setwd("/Users/mac/Desktop/sportsbetting/MarkowitzPortfolio")
library(shiny)
runApp()
setwd("/Users/mac/Desktop/sportsbetting/MarkowitzPortfolio")
library(shiny)
runApp()
library(rsconnect)
deployApp()
